function    [rH, ri, rf] = save2ezr(i1,i2, varargin); 
% To save VOIs to .ezr files (ver.7)
%
% Basics of ver.7:
%   Save vpw = [positinos [,weights]] of volvoxels of a VOI (VOIID#)
%    in v_VOIID#.mat in a folder 'full/path/name/vois'
%   This cord generate a VOI file (= full/path/name.ezr) for later usages
%   
% Basic usage:
%   For an output VOI file 'full/path/name.ezr'
%   1. Create a path 'full/path/name/vois'
%   2. Save VOIs in v_VOIID#.mat as follows:
%     >> save full/path/name/vois/v_VOIIDNo.mat vpw
%           where vpw = [p, w]; p hols voxel positions & w holds weights
%           e.g., p = find(vM(:)>0.5); w = vM(p);
%   3. Create the output file as follows:
%     >> [rH, ri, rf] 	= save2ezr('full/path/name.ezr',input_2 ...
%                           [,item/value]);
%       Enter a file @input_2 to get image & voxesl dimensions
%       if the output exists, [] is valid.
%       for [,item/value], listed 'Options' (below) are allowed for save2ezr.m 
%   4. Adjust variable rf, as needed
%    Columns of rf (See Usage-2 below; n by 10) are:
%    Do not alter columns 1 through 5!
%     c1: 1 (0 in pre-v7)
%     c2: VOIID#s 
%     c3: VOI creation dates/times (=datenum of 'v_VOIID#s.mat)
%     c4: volumes of VOIs in mL (acrual)
%     c5: max values of weights (always adjusted to 1)
%    Modify columns 6 through 8, as needed:
%     c6: 1 if to refine/define, 0 otherwise (default: 0)
%     c7: VOI completion status (default: 1, if existing)
%         1 = pending; 2 = complete; 9 = as good as possible
%         0/-1 = planned but not started yet
%     c8: defining durations (min) (default: 0)
%    Do not alter columns 9 and 10!
%     c9-10: administrative. Never alter these columns
%   5. Add item/values pairs, as needed
%     >> um_save(rH,[],[],[], item_i,values_i [,item_more,values_more]);
%       any items (so long as size(item_more,2)>=7) may be added for um_save.m 
%   6. Close the file:
%     >> um_save(rH, 1, ri, rf);
%
% To convert existing pre-v7 VOI files to v7 files:
%   1. To keep all VOIs
%     >> save2ezr('full/path/name.ezr','all');
%   2. To keep c7 are 1 = pending; 2 = complete; 9 = as good as possible
%     >> save2ezr('full/path/name.ezr','keep');
%
% Notes:
%   1. No need to modify rf? > Try step 3 without outputs.
%
% Options:
%   'mri',val   use this option to save 'full/path/mri4vois.nii' under the
%               variable 'mri4vois'
%               Enter [] to record i2
%   'dsp','off' not to display what to do next for basic usage.
%               default: 'on'
%               if no output arguments, 'dsp' is 'off' 

% New! 
%  * Every version 7 VOI file has two components:
%   1. The main VOI file:      'full/path/name.ezr'
%     usually generated by this code
%   2. Individual VOI files:   'full/path/name/vois/v_DOIID#.mat'
%     usually generated from scratch in VOILand (vL2Land.m) or generated by
%     automated region segmentation tools such as Freesurfer/FSL-anat/MRICloud
%     saved variable: 'vpw' = [VOI voxel positions (n by 1) [, weights (n by 1)]] 
%     access it as x.vpw after: >> x = load('full/path/name/vois/v_DOIID#.mat')
%  * Functions of this code:
%   1. To generate the main VOI file based on existing individual VOI files
%      But it works without VOI files in special cases (See
%   2. To convert pre-v7 VOI files to v7 files
%      The following lines are not recommended (see below):
%     >> save2ezr('full/path/common.ezr','convert'); 
%     >> save2ezr('full/path/personal.ezr','convert',   'vfg',2); 
%      When VOIs are generated by IDAE, use iv2_FixIt4iv2.m instead
%     >> iv2_FixIt4iv2('mv2v7',0);
%      This code checks if VOIs match 'current' MRI in image and voxel
%      dimensions (MRI could be revised after generation of pre-v7 VOIs).
% 
% Usage-1: To take default values of variable 'dataInfo' (=rf)
%
%     >> save2ezr('full/path/name.ezr',input_2);
%
%   input_2:    Enter any file that lists image / voxel dimensions
%               [] is valid if input_1 exists
%
% Usage-2: To revise variable df outside save2ezr.m
%
%  	  >> [rH, ri, rf] 	= save2ezr('full/path/name.ezr',input_2);
%       adjust rf, as needed (See Usage-1 above). 
%       add item/its_values pairs, as needed
%     >> um_save(rH,[],[],[], item_i,its_values [,item_more,its_values]);
%       don't forget to close it:
%     >> um_save(rH, 1, ri, rf);
%
% Options:
%   'vfg',val   this option was created to allow two VOI fils types in IDAE
%       shared VOIs:    shared by all users. usually generated by automated
%                       VOI segmentation programs. never altered.
%       personal VOIs:  refined/defined by individual users,
%                       starting with shared VOIs.
%       therefore, personal VOI files have two folders (personal & shared)
%       while shared VOI files has one folder alone.
%       default: 'fullfile(edx,enm)' where [edx, enm] = fileparts(
%               are saved for all subjects (common to all users), and for
%               individual users (private). In such cases, use as follows:
%               'vfg',char('fullfile(edx,enm)','fullfile(fileparts(fileparts(edx)),
%               enm)');
%               the two folders can be specified in c1 if 
%   'pvs','on'  use this option to prepare initial personal VOI file from
%               the shared VOI file
%
% Usages in automated VOI segmentation codes:
%   Set the codes to generate VOI files ('v_VOIID#.mat') under a common
%   VOI folder (='full/path/common/vois'). Then, 
%    >> save2ezr('full/path/common.ezr',[]);
%   
%    when excessive VOIs in .ezr (i.e., v_*.mat not present; due to version
%    changes, etc), use the following option:
%       'rmv',vnos 
%
%   Initially there should be no VOI files in the personal VOI folder
%   ('full/path/personal/vois'). Prepare personal VOI file
%   ('full/path/personal.ezr') as follows:
%    >> save2ezr('full/path/personal.ezr','full/path/common.ezr', 'vfg',2, 'pvs','on');
% 
% (cL)2000~20   hkuwaba1@jhmi.edu 

% previous version was saved in \attic

margin                          = 2;
if nargin<margin;               helq(mfilename);                                    return;         end;
% vfgval                          = 1;
dspval                          = 'on';
mrival                          = [];
n0                              = nargin;
um_options;
if ~OptionsOK;                                                                      return;         end;
if isempty(i2);                 i2                          = i1;                                   end;
% when convert (all | keep) option is selected:
if strcmpi(i2,'all') || strcmpi(i2,'keep');
    if ~exist(i1,'file');
        disp('.problem! input VOI file has to exist for this usage');
        disp([' entered: ', i1]);                                                   return;         end;
  	feval(['local_convert_',lower(i2)],i1);                                       	return;         end;
%
if ~exist(i2,'file');
    disp('.problem! Enter a file (@input_2) to get image / voxel dimensions');
    disp(' > Enter ''all'' or ''keep'' to convert pre-v7 to v7, if intended');   	return;         end;
% vfg                             = {'fullfile(edx,enm)', char('fullfile(edx,enm)',   ...
%                                                            'fullfile(fileparts(fileparts(edx)), enm)')};
% if isnumeric(vfgval);           vfg_x                       = vfg{vfgval(1)};
% else;                           vfg_x                       = vfgval;                               end;
% if strcmpi(i2,'convert');       
%     if ~exist(i1,'file');     	disp('.problem! unable to locate the scource VOI file');
%                                 disp([' sought: ',i1]);                             return;         end;
%     [edx, enm]                 	= fileparts(i1);
%     if ~isempty(dir(fullfile(edx, enm, 'vois', 'v_*.mat')));
%         disp('.problem! v_VOIID#.mat exist (not applicable to ''convert'' option of save2ezf.m');
%         disp([' in: ',fullfile(edx, enm, 'vois')]);                             	return;         end;
%     %
%     if size(vfg_x,1)==2;        local_convert_personal(i1, vfg_x);
%     else;                       local_convert_common(i1, vfg_x);                                    end;
%                                                                                return;         end;
% if strcmpi(pvsval,'on');
%     if ~exist(i2,'file');       disp('.problem! unable to locate the parent VOI file');
%                                 disp([' sought: ',i2]);                             return;         end;
%     copyfile(i2, i1);
%     d0                          = gei(i1,   'dataInfo');
%     d0(:,   1)                  = 2;
%     si                          = struct('h2s',108,'c',mfilename,'p',i1,'cp','a');
%     ri                      	= zeros(size(d0, 1),        1);
%     rf                        	= zeros(size(d0, 1),        10);
%     %
%     rH                        	= um_save(i1,[],si,[],      'ROITypeNo',7,      ...        
%                                     'ROISetUsed','VOIdef',  'voi_dir',vfg_x,    'mri4vois',mrival);
%     for i=1:1:size(d0,1);    	[ri(i, :), rf(i, :)]        = um_save(rH, 1, si.h2s, []);           end;
%     rf(:,   1:8)              	= d0(:, 1:8);
%     um_save(rH, 1, ri, rf);
%     disp('.done! (initial personal VOI file in ver.7)');
%     disp([' output: ',i1]);                                                         return;         end;
% %
% if isempty(i1);                                                                     return;         end;
% if exist(i1,'file') && isempty(i2);
%                                 i2                          = i1;                                   end;
% if isempty(i2);                 disp('.problem! input_1 has to exist when input_2 is []');
%                                 disp([' not found: ',i1]);                          return;         end;
% if ~exist(i2,'file');           disp('.problem! unable to locate input_2');
%                                 disp([' sought: ',i2]);                             return;         end;
%                            
c15                             = local_get_vinfo(i1,i2);
if isempty(c15);                disp(['.aborting: ',mfilename]);                    return;         end;
%
ri                              = zeros(size(c15,1),        1);
rf                              = zeros(size(c15,1),        10);
%
if strcmpi(i1,i2);              
    si                        	= struct('h2s',108,'c',mfilename,'p',i1,'cp','a');
else;                           
    si                        	= struct('h2s',108,'c',mfilename,'p',i2,'cp','m');                  end;
%
rH                              = um_save(i1,[],si,[],      'ROITypeNo',7,          ...
                                    'ROISetUsed','VOIdef',  'mri4vois',mrival);
for i=1:1:size(rf,1);           [ri(i, :), rf(i, :)]        = um_save(rH, 1, si.h2s, []);           end;
%
rf(:,   1:5)                    = c15;
% closing the file if any of rH, ri, or rf is missing from outputs:
% it's up to the calling code to display outputs:
if nargout<3;                   um_save(rH, 1, ri, rf);                             return;         end;
%
if ~strcmpi(dspval,'on');                                                           return;         end;
disp('.info: output VOI file (=input_1) is ready to close');
disp(' > modify columns 6-8 of rf (=output_3), as needed.(do not modify columns 1-5, 9, and 10)');
disp(' > more item/values pairs to save? Try as follows:');
disp('  >> um_save(rH,[],[],[], item_i,its_values [,item_more,its_values]);');
disp('.lastly close it: >> um_save(rH,1,ri,rf);');

return;    
%%

function                        local_convert_all(i1);
%%
%
d                               = gei(i1,  	'dataInfo');
if any(d(:,1)>0);               disp('.info: a pre-v7 VOI file (not converting)');
                                disp([' file: ',i1]);                               return;         end;
%
[edx, enm]                      = fileparts(i1);
if ~exist(fullfile(edx, enm, 'vois'),'dir');
                                mkdir(fullfile(edx, enm, 'vois'));                                  end;
%
% setting file location #s (c1) & max values of weights (always 1 in ver.7)
d(:,    [1,5])                  = 1;
d(:,    3)                      = now;
vpw                             = [];
for i=1:1:size(d, 1);
    clear vpw;
    vpw                         = ged(i1,   i);
    d(i,   4)                   = size(vpw, 1); 
    if size(vpw,2)==2;          vpw(:, 2)                   = vpw(:, 2)./max(vpw(:, 2));
                                d(i,    4)                  = sum(vpw(:));                          end;
    save(fullfile(edx, enm, 'vois', ['v_',int2str(d(i,2)),'.mat']), 'vpw');                         end;
% converting volumes to mL:
vsz                             = gei(i1,   'voxelsize');
d(:,   4)                       = d(:, 4).*prod(vsz)./1000;
%
tfl                             = tmpfln([],    'ezr');
disp(['.copying the VOI file to: ',tfl])
copyfile(i1, tfl);
%
si                              = struct('h2s',108,'c',mfilename,'p',i1,'cp','a');
ri                              = zeros(size(d, 1),         1);
rf                              = zeros(size(d, 1),         10);
%
rH                              = um_save(i1,[],si,[],      'ROITypeNo',7,  'ROISetUsed','VOIdef');
for i=1:1:size(d,1);            [ri(i, :), rf(i, :)]        = um_save(rH, 1, si.h2s, []);           end;
rf(:,   1:8)                    = d(:,  1:8);
um_save(rH, 1, ri, rf);
disp('.done! (pre-v7 converted to ver.7)');
disp([' output: ',i1]);
disp(['.deleting the temporal file: ',tfl]);
if exist(tfl,'file');           delete(tfl);                                                        end;
return;
%%

function                        local_convert_keep(i1);
%% converting 
d                               = gei(i1,  	'dataInfo');
if any(d(:,1)>0);               disp('.info: a ver.7 VOI file (not converting)');                   end;
% keeping those VOIs for which c7 are 1 = pending; 2 = complete; 9 = as good as possible
ii                              = find(d(:, 7)>0)'
if isempty(ii);
    disp('.warning! no VOIs are pending, complete, or as good as possible');
    disp(' > under ver.7, it should be deleted, if a shared copy is present under IDAE.');
    disp(' > just execute the following line, if the user is sure.');
    disp([' >> delete ',i1]);                                                    	return;         end;
%
return;
[edx, enm]                      = fileparts(i1);
if ~exist(fullfile(edx, enm, 'vois'),'dir');
                                mkdir(fullfile(edx, enm, 'vois'));                                  end;
% setting file location #s (c1) & max values of weights (always 1 in ver.7)
c15                             = ones(length(ii),  5);
c15(:, 2)                       = d(ii, 2);
c15(:, 3)                       = now;
vpw                             = [];
ic                              = 0;
for i=ii;
    ic                          = ic + 1;
    clear vpw;
    vpw                         = ged(i1,   i);
    c15(ic, 4)                  = size(vpw, 1);
    if size(vpw,2)==2;          vpw(:, 2)                   = vpw(:, 2)./max(vpw(:, 2));
                                c15(ic, 4)                  = sum(vpw(:, 2));                       end; 
    %                        
    save(fullfile(edx, enm, 'vois', ['v_',int2str(d(i,2)),'.mat']), 'vpw');                         end;
% converting volumes to mL:
vsz                             = gei(i1,   'voxelsize');
c15(:, 4)                       = c15(:, 4).*prod(vsz)./1000;
%
tfl                             = tmpfln([],    'ezr');
disp(['.copying the VOI file to: ',tfl])
copyfile(i1, tfl);
%
si                              = struct('h2s',108,'c',mfilename,'p',i1,'cp','a');
ri                              = zeros(size(c15, 1),     	1);
rf                              = zeros(size(c15, 1),     	10);
%
rH                              = um_save(i1,[],si,[],      'ROITypeNo',7,  'ROISetUsed','VOIdef');
for i=1:1:size(d,1);            [ri(i, :), rf(i, :)]        = um_save(rH, 1, si.h2s, []);           end;
rf(:,   1:8)                    = d(:,  1:8);
um_save(rH, 1, ri, rf);
disp('.done! (user-specific VOI file in ver.7)');
disp([' output: ',i1]);
disp(['.deleting the temporal file: ',tfl]);
if exist(tfl,'file');           delete(tfl);                                                        end;
return;
%%

function    c15                 = local_get_vinfo(i1,i2);
%% returns columns 1 through 5 for 'rf':
%
%   usage:      c15             = local_get_vinfo(outout.ezr,file4vsz);
%
c15                             = [];
[edx, enm]                      = fileparts(i1);
vmats                           = dir(fullfile(edx,enm,'vois',  'v_*.mat'));
if isempty(vmats);
  	disp(['.problem! no v_VOIID#.mat in the VOI directory (aborting: ',mfilename,')']);
	disp([' sought: ',fullfile(edx,enm,'vois')]);                                   return;         end;
%
% looking for deviations from the v_12345.mat format:
vmatc                           = char(vmats.name);
ii                              = umo_cstrs(vmatc(:, 8:11), '.mat', 'im1');
vnos                            = str2num(vmatc(ii, 3:7));
if size(ii,2)~=size(vmatc,1);   
 	disp('.info: ignoring some VOI files not in the v_12345.mat format');                           end;
%
c15                             = zeros(size(vnos,1),   5);
ic                              = 0;
for i=ii;
    ic                          = ic + 1;
    x                           = load(fullfile(vmats(i).folder,vmats(i).name));
    if isfield(x,'vpw');        
        if size(x.vpw,2)==2;
            c15(ic,  :)        	= [1, vnos(ic), vmats(i).datenum, sum(x.vpw(:,2)), 1];      
        else;           
            c15(ic,  :)        	= [1, vnos(ic), vmats(i).datenum, size(x.vpw,1), 1];end;    end;    end;
%
if any(c15(:,1)<1);             c15                         = [];
                                disp('.problem! following VOI files are not right');
                                disp(' >no vpw field; empty vpm, etc');
                                dispCharArrays(2,char(vmats(ii(c15(:,1)<1)).name));
                                disp([' folder: ',vmats(1).folder]);                return;         end;
% converting volumes to mL:
vsz                             = gei(i2,   'voxelsize');
c15(:, 4)                       = c15(:, 4).*prod(vsz)./1000;
return;
%%



if any(g4vL2{fNo}.vnos(:,3)<datenum('10-Dec-2009 12:11:12'));
    disp('.info: old VOIs (generated before 12/10/2009) are noted');
    disp('> replacing them with new VOIID#s');
    old2new                     = [     51059       51040
                                        52001       51700
                                        69002       68400
                                        69001       68700
                                        69408       69400
                                        69409       69700
                                        41401       41400
                                        41402       41700
                                        41403       42400
                                        41404       42700
                                        41405       43400
                                        41406       43700
                                        41407       44000];
    vv                          = consolidVOINos(old2new(:,1),g4vL2{fNo}.vnos(:,2));
    g4vL2{fNo}.vnos(vv(:,2)~=0,  2)                         = old2new(vv(vv(:,2)~=0,2), 2);         end;
