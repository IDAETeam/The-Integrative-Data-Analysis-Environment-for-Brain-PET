function    mv2_s2m(i1,i2,i3,i4); 

% To set variables for model parameter estimation routines (PIMs & RTMs) 
%       
%       usage:      mv2_s2m('mflg',L1W,'v4t','ofln')
%       
%   mflg    -   PIMs (for plasma input methods) or RTMs (reference tissue methods)
%               Following flags are also valid:
%               'disp'  -   to display MPE results
%               'maps'  -   to generate maps of PET variables (BP map etc)
%               'sres'  -   for sumRes 
%   L1W     -   Figure handle # of IDAE Level 1 Window (of this session) 
%   v4t     -   The file of variables for TACs (generated by mv2_s2.m)
%   ofln    -   The output (this file will be used if present)
%
% Notes:
%   1.  mv2_s2m('fun',[]) is also valid to perform local_fun herein.
%
% (cL)2013~4    hkuwaba1@jhmi.edu 

margin                          = 2;
if nargin<margin;               helq(mfilename);                                    return;         end;
% numel(findobj(gcf, 'Style','edit'))
if numel(findobj(gcf, 'Style','edit'))>0 && ~strcmpi(get(gco, 'Style'),'edit');     return;         end;    
% which(['local_',lower(i1)])
if isempty(i2);                 feval(['local_',lower(i1)]);                        return;         end;
%
if nargin==2;                   feval(['local_',lower(i1)], i2);                    return;         end;
x                               = local_check_inputs(i3,i4);
% x.p4mpe
if isempty(x);                                                                      return;         end;
local_set(x);
return;
%%

function    [out, cb]           = local_pims_var;
%%
% s3 indicates whether editable (=1) or not (=0), after initial selections:
% Do not remove elements of s1{1}, but new ones may be added:
out.title                     	= 'Select plasma input method/model to perform';
% when to change s1 below, modify sss @local_db in mv2_performPIMs.m:
out.methods                     = {'OTCM','TTCM3','TTCM4','TTCM4C','PRGA','BPITp','MA1'};   %,'TPR'};
out.flag                        = {'eeiixi','eeeixi','eeeexi','ereexi','-','-','-'};        %,'-'};
%
out.p_titles                    = {'Method','Vas. volume','Time','Initial guess','Variable'};
% strings for callback functions
out.str4cb                     	= {'mpe','eic','tim','gin','var'};    
if nargout==1;                                                                      return;         end;
% correspong to out.p_title & out.str4cb, ignoring the last one (=var):
cb.title{1}                     = ' ';
cb.str{1}                       = ' ';
%
cb.title{2}                     = 'Vascular volume: fit/fix followed by volume (mL/mL)';
cb.str{2}                       = {'fit 0.035','fit 0.035','fit 0.035','fit 0.035','-','-','-'}; %,'-'};
%
cb.title{3}                     = 'Enter start / end times for approach in sTe format';
cb.str{3}                       = {'0T20','0T90','0T90','0T90','20T90','40T90','10T90'}; %,'60T90'};
%
cb.title{4}                     = 'Enter initial guesses; OTCM+PRGA = to calculate';
% # of inputs will be counted by # of 'k/K' later:
cb.str{4}                       = {'K1=0.3, k2=0.2','K1=, k2=, k3=','OTCM+PRGA',    ...
                                    'ref','-','-','-'}; % ,'-'};
%
% for TTCM4 and TTCM4C, flg{4,i} will be 'OTCM&PRGA' 
%
return;
%%

function    [out, cb]           = local_rtms_var;
%%
% s3 indicates whether editable (=1) or not (=0), after initial selections:
% Do not remove elements of s1{1}, but new ones may be added:
out.title                       = 'Select reference tissue methods to perform';
out.methods                   	= {'MRTM2','RTGA','BPIT','TRR','SRTM2','SUV'};
% parameter titles
out.p_titles                   	= {'Method','Time','Ref.Region','k2R','Variable'};
% strings for callback functions
out.str4cb                    	= {'mpe','tim','rfg','k2r','var'};
%
if nargout==1;                                                                      return;         end;
% correspong to out.p_title & out.str4cb, ignoring the last one (=var):
cb.title{1}                     = ' ';
cb.str{1}                       = ' ';
%
cb.title{2}                 	= 'Enter start / end circulation times in sTe format';
cb.str{2}                       = {'5T90','10T90','60T90','60T90','10T90','60T90'};
%
cb.title{3}                     = 'Select a reference region (one at a time)';
cb.str{3}                       = {'r','r','r','r','r','-'};
%
cb.title{4}                     = 'Enter the value for k2R (k2 of reference region)';
cb.str{4}                       = {'mrtm2','rtga','-','-','-','-'};
%
return;
%%

function                        local_set_tim(bHs, iflg, ires, icb);
%% 
% iflg & ires are empty
% preparation > cancelling all GUIs of the column (=bHs(:, cNo)):
set(bHs(:),     'Style','pushbutton',  	'String',' ',   'CallBack',' ');
% 
% starting from scratch:
if isempty(iflg);               
    set(bHs(1), 'String',icb,   'CallBack','mv2_s2m(''get_tim'',[]);');     	
   	set(bHs(2), 'String','*',   'CallBack','mv2_s2m(''get_tim'',[]);');             return;         end;
%
% resuming from a previous sets:
for i=1:1:size(iflg,1);
    set(bHs(i), 'Value',1,  'Style','pushbutton',   'String',deblank(iflg(i, :)),   ...
                                'CallBack','mv2_s2m(''get_tim'',[]);');                             end;
%
set(bHs(i+1),   'String','*',   'CallBack','mv2_s2m(''get_tim'',[]);');
return;
%%

function                        local_get_tim;
%%
% potential scenarios for returning to this subroutine
%   1) a * GUI is hit           > give a new suggestion & in 'edit' mode 
%   2) a sTe GUI is hit         > set it in 'edit' mode
%   3) returning in 'edit' mode
%     a) in 'correct' format 
%     b) not 'correct'          > 
%     c) blank                  > remove it
% GUIs under 'time' column can assume the following 4 states: 
%   1) to display *,
%   2) to display format-wisely ‘correct’ string, 
%   3) in  ‘edit' mode, and 
%   4) inactive (blank GUIs)
% When clicked GUI display format-wisely ‘correct’ string (Status #2)
%   >  set it in 'edit' mode (intension = modify)
% When clicked GUI displays * (Status #1)
%	1. show a format-wisely 'correct' string (guessing from one up)
%  	2. add a new * GUI one down
% When clicked GUI is in 'edit' mode (Status #3)
%   1. re-evauate all GUIs for the format to keep format-wisely 'correct' ones alone
%   2. add a * GUI at the end
%   3. inactivate all the rest
%
h0                              = gco;
if isempty(get(gco, 'String')); set(gco,    'String',' ');                                          end;
c1                              = getLseg(get(gco, 'String'), 1);
% Scenario #1: a sTe GUI is hit:
if c1(1)~='*' && ~strcmpi(get(gco, 'Style'),'edit');
	set(gco,  	'Style','edit', 'BackgroundColor',iv2_bgcs(11));                    return;         end;
%
% row and column #s of current object:
rc                              = str2num(get(gco,  'Tag'));
if length(rc)~=2;                                                                   return;         end;
%
cwUD                            = get(gcf, 'UserData');
t2                              = [',',int2str(rc(2))];
istr                            = cwUD.cbstr{rc(2)}{ umo_cstrs(char(cwUD.cbstr{1}),  ...
                                [get(findobj(gcf, 'Tag','prep.MPE.cmethod'), 'String'),' '], 'im1')};
% Scenario #1: When * GUI is clicked:
if c1(1)=='*';
    % first, setting the next GUI available to enter:
    set(findobj(gcf, 'Tag',[int2str(rc(1)+1),t2]),                  ...
                                'String','*',   'CallBack','mv2_s2m(''get_tim'',[]);');
    %
    % adjusting the string according to the string of one above row, if any: 
    if rc(1)>1;
        s0                   	= get(findobj(gcf, 'Tag',[int2str(rc(1)-1),t2]),    'String');
        s0(s0<'0' | s0>'9')     = ' ';
        s1                     	= str2num(s0);
        if istr(1)=='0';        s1(2)                       = s1(2) + 5;
        else;                 	s1(1)                       = s1(1) + 5;                            end;
        istr                    = [int2str(s1(1)),'T',int2str(s1(2))];                              end;
    %    
	set(h0,   	'String',istr,  'Style','edit', 'BackgroundColor',iv2_bgcs(11));    return;         end;
%
% Scenario #3: returning in 'edit' mode:
if any(c1~=' ');                s0                          = c1;
                                s0(s0<'0' | s0>'9')         = ' ';
                                s1                        	= str2num(s0);
    if length(s1)~=2;           
        for i=9:1:11;           set(h0, 'BackgroundColor',iv2_bgcs(i));
                                pause(0.5);                                                         end;
                                                                                    return;         end;
                                                                                                    end;
%
set(gco,    'Style','pushbutton',   'BackgroundColor',iv2_bgcs(0));
bHs                             = get(findobj(gcf, 'Tag','prep.MPE.mflg'),  'UserData');
astr                            = getLseg(char(get(bHs(:, rc(2)),  'String')),1);
set(bHs(:, rc(2)),  'String',' ',   'CallBack',' ');
%
astr(astr(:,1)=='*',    :)      = ' ';
cm1                             = umo_cstrs(astr, [],   'cm1');
ic                              = 0;
for i=find(cm1(:,2)'>0);
    if astr(i, 1)~=' ';         
        ic                    	= ic + 1;
     	set(bHs(ic,rc(2)),      'String',deblank(astr(i, :)),   'CallBack','mv2_s2m(''get_tim'',[]);'); 
                                                                                            end;    end;
%
if ic<1;
    ic                          = ic + 1;
    set(bHs(ic,rc(2)),  	'String',istr,  'CallBack','mv2_s2m(''get_tim'',[]);');                 end;
% 
% adding * GUI to accept more time flags:
ic                              = ic + 1;
set(findobj(gcf, 'Tag',[int2str(ic),t2]), 'String','*', 'CallBack','mv2_s2m(''get_tim'',[]);');
return;
%%

function                        local_brink(h, str, s);
%%
s0                              = get(h,  'String');
bgc0                            = get(h,  'BackgroundColor');
set(h,  'String',str,   'BackgroundColor',iv2_bgcs(11));
pause(s);
set(h,  'String',s0,    'BackgroundColor',bgc0);
return;
%%

function                        local_set_eic(bHs, iflg, ires, icb);
%% 
% iflg & ires are always empty!
%
% preparation > cancelling all GUIs of the column (=bHs(:, cNo)):
set(bHs(:),     'Style','pushbutton',  	'String',' ',   'CallBack',' ');
% 
%
if icb(1)=='-';               
    set(bHs(1),'String',icb,        'CallBack',' ');
else;                           
    set(bHs(1),'String',icb,        'CallBack','mv2_s2m(''get_eic'',[]);');
   	set(bHs(2), 'String','*',       'CallBack','mv2_s2m(''get_eic'',[]);');         return;         end;
return;
%%

function                        local_blink_inst(s1);
%%
h                               = findobj(gcf, 'Tag','prep.MPE.inst');
s0                              = get(h,    'String');
c0                              = get(h,    'BackgroundColor');
set(h,  'String',s1,    'BackgroundColor',iv2_bgcs(11));
pause(0.5);
set(h,  'String',s0,    'BackgroundColor',c0);
return;
%%

function                        local_get_eic;
%% translating the input of 'fit flag' field:
% clicked GUI display format-wisely ‘correct’ string (Status #2)
h0                              = gco;
s0                              = get(gco,      'String');
if ~any(s0=='*') && ~strcmpi(get(gco, 'Style'),'edit');
	set(gco,  	'Style','edit', 'BackgroundColor',iv2_bgcs(11));                    return;         end;
% 
% row and column #s of current object:
rc                              = str2num(get(gco,  'Tag'));
if length(rc)~=2;                                                                   return;         end;
%
cwUD                            = get(gcf, 'UserData');
t2                              = [',',int2str(rc(2))];
% if not in 'edit' style > activate the GUI:
if any(s0=='*');
    % first, setting the next GUI available to enter:
    set(findobj(gcf, 'Tag',[int2str(rc(1)+1),t2]),                  ...
                                'String','*',   'CallBack','mv2_s2m(''get_tim'',[]);');
    %
  	s0                          = get(findobj(gcf, 'Tag',[int2str(rc(1)-1),         ...
                                                            ',',int2str(rc(2))]),   'String');
    s0(lower(s0)~=upper(s0))    = ' ';
    s1                          = str2num(s0);
    if strcmpi(cwUD.p4mpe.mflg,'RTMs');
                                s1(1)                       = s1(1) + 5;
    else;                       s1(2)                       = s1(2) + 5;                            end;
    set(h0,   	'String',[int2str(s1(1)),'T',int2str(s1(2))]);                      return;         end;
% 
set(gco,    'Style','pushbutton',   'BackgroundColor',iv2_bgcs(0));



[c1, c2]                     	= getLseg(get(gco,  'String'), 1);
if c1(1)=='*';
    set(gco,    'String','fix 0.035',   'Style','edit', 'BackgroundColor',iv2_bgcs(11));
    tagNo                       = str2num(get(gco,  'Tag'));
    set(findobj(gcf, 'Tag',[int2str(tagNo(1)+1),',',int2str(tagNo(2))]),            ...
      	'String','*',   'CallBack','mv2_s2m(''get_eic'',[]);');                     return;         end;
    
% if not in 'edit' style > activate the GUI:
if ~strcmpi(get(gco, 'Style'),'edit');
    set(gco,    'Style','edit', 'BackgroundColor',iv2_bgcs(11));                    return;         end;
%

if umo_cstrs(['fit';'fix'],c1,'im1')<1 || isempty(str2num(c2));
    local_blink_inst('Use fit 0.035 or fix 0.035 format for vaslular volume');      return;         end;
%
set(gco,    'Style','pushbutton',   'BackgroundColor',iv2_bgcs(0));
return;
%%

function                        local_set_gin(bHs, iflg, ires, icb);
%%
% iflg & ires are always empty!

set(bHs(:),     'Style','pushbutton',   'String',' ',   'CallBack',' ');
%
im1                           	= umo_cstrs(['k1=';'ref'], lower(icb), 'im1');
if im1<1;                       set(bHs(1),'String',icb,   	'CallBack',' ');
elseif im1==1;                  
    set(bHs(1),'String',icb,   	'CallBack','mv2_s2m(''get_gin'',[]);');
    set(bHs(2), 'String','*',	'CallBack','mv2_s2m(''get_gin'',[]);');
elseif im1==2;
    x                         	= get(gcf,  'UserData');
    vv                       	= VOIdef(x.p4mpe.refs);
    for i=1:1:size(vv.anm,1);       
        set(bHs(i), 'Value',1,  'Style','radiobutton',  ...
            'String',[deblank(vv.snm(i,:)),' ',int2str(x.p4mpe.refs(i))]);                  end;    end;
return;
%%

function                        local_get_gin;
%%
cwUD                            = get(gcf,      'UserData');
%
%
mNo                             = umo_cstrs(char(cwUD.cbstr{1}), [get(  ...
                                    findobj(gcf, 'Tag','prep.MPE.cmethod'), 'String'),' '], 'im1');
cNo                             = umo_cstrs(char(cwUD.str4cb), 'gin',   'im1');
if strcmpi(get(gco, 'Style'),'pushbutton');
    % when a * GUI is hit:
    %   > replace * with a new suggested entry + add a new * GUI one below 
    if get(gco, 'String')=='*';
        co_tag               	= str2num(get(gco, 'Tag'));
        istr                	= cwUD.cbstr{cNo}{mNo};
        istr(find(istr=='=',1)+1:find(istr==',',1)-1)    	= ' ';
        istr(find(istr=='=',1,'last')+1:end)               	= ' ';
        set(gco,    'String',istr,  'Style','edit', 'BackgroundColor',iv2_bgcs(11));
        set(findobj(gcf, 'Tag',[int2str(co_tag(1)+1),',',int2str(co_tag(2))]),      ...
                            'String','*',   'CallBack','mv2_s2m(''get_gin'',[]);');      
    % when the GUI is a pushbutton  > chnage it to edit mode:
    else;
        set(gco,    'Style','edit', 'BackgroundColor',iv2_bgcs(11));                                end;

% when a 'edit' GUI is done (= 'Enter' is hit):
elseif strcmpi(get(gco, 'Style'),'edit');                   
    cstr                        = get(gco, 'String');
    if isempty(cstr) || ~any(cstr~=' ');
        set(gco,    'String','*',   'BackgroundColor',iv2_bgcs(0));                 return;         end;
    % 
    cstr(find(lower(cstr)=='k')+1)                          = 'x';
    cstr(1-double((cstr>='0' & cstr<='9') | cstr=='.')>0)   = ' ';
    vstr                        = getLseg(cstr, [0,2]);
    % default
    istr                        = cwUD.cbstr{cNo}{mNo};
    istr(find(istr=='=',1)+1:find(istr==',',1)-1)           = ' ';
    istr(find(istr=='=',1,'last')+1:end)                   	= ' ';
    istr(istr==',')             = ' ';
    jstr                        = getLseg(istr, [0,2]);
    % 
    % when the entry looks wrong:
    if numel(vstr)~=numel(jstr);
        cstr                	= get(gco, 'String');
        set(gco,    'String','Wrong format!',   'BackgroundColor',iv2_bgcs(9));
        pause(1);
        set(gco,    'String',cstr,  'Value',1,  'BackgroundColor',iv2_bgcs(11));    return;         end;
    %
    qstr                        = [jstr{1},' ',vstr{1},', '];
    for i=2:1:numel(vstr);      qstr                        = [qstr, jstr{i},' ',vstr{i},', '];     end;
    set(gco,    'String',qstr(1, 1:end-2),  'Style','pushbutton',   'BackgroundColor',iv2_bgcs(0)); end;
return;
%%

function                        local_set_rfg(bHs, iflg, ires, icb);
%% set GUIs for accepting reference regions:
set(bHs(:),     'Style','pushbutton',   'String',' ',   'CallBack',' ');
%
if ~isempty(icb) && icb(1)=='-';                 
    set(bHs(1), 'String','Not applicable',	'UserData',struct('flg','-', 'res',nan));
                                                                                    return;         end;
x                               = get(gcf,  'UserData');
vv                              = VOIdef(x.p4mpe.refs);
for i=1:1:size(vv.anm,1);       
    set(bHs(i),     'Value',1,  'Style','radiobutton',  ...
                                'String',[deblank(vv.snm(i,:)),' ',int2str(x.p4mpe.refs(i))]);     	end;    
return;
%%


function                        local_set_k2r(bHs, iflg, ires, icb);
%% set GUIs for accepting k2R:
set(bHs(:),     'Style','pushbutton',   'String',' ',   'CallBack',' ');
%
if icb(1)=='-';                 set(bHs(1), 'String','Not applicable');             return;         end;
%
if strcmpi(icb,'mrtm2');
  	set(bHs(1), 'String','median k2R',  'Style','radiobutton',  'Value',0);
   	set(bHs(2), 'String','optimize',    'Style','radiobutton',  'Value',1);
   	set(bHs(3), 'String','fix as RTGA',	'Style','radiobutton',  'Value',0);                  
    % 
    if isempty(iflg);                                                               return;         end;
    imr                         = umo_cstrs(char(iflg),char('median','optimize','fix'), 'im1');
    if any(imr>0);              set(bHs(1:3),       'Value',0);
                                set(bHs(imr>0),     'Value',1);                                     end;
                                                                                    return;         end;
%
if isempty(iflg) && strcmpi(icb,'rtga');
  	local_list_k2r(bHs(1));
   	set(bHs(2),	'String','*',   'CallBack','mv2_s2m(''list_k2r'',nan);');           return;         end;
%        
for i=1:1:size(iflg,1);         
    set(bHs(i), 'String',deblank(iflg(i, :)),   'CallBack','mv2_s2m(''get_k2r'',[]);');             end;
%
set(bHs(i+1),   'String','*',   'CallBack','mv2_s2m(''list_k2r'',nan);'); 
return;
%%

function                        local_list_k2r(bH,i2,i3,i4);
%%
if isnan(bH);                   
    bH                          = gco;
    % do not change 'str2num' (returns 2 #s) to 'str2double' (returns one # alone): 
    rc                        	= str2num(get(bH,  'Tag'));
    h                           = findobj(gcf, 'Tag',[int2str(rc(1)-1),',',int2str(rc(2))]);
%     get(h,'String')
%     ~strcmpi(get(h, 'Style'),'pushbutton')
    if isempty(str2num(get(h,'String'))) || ~strcmpi(get(h, 'Style'),'pushbutton'); return;         end;
    set(findobj(gcf, 'Tag',[int2str(rc(1)+1),',',int2str(rc(2))]),      ...
                                'String','*',   'CallBack','mv2_s2m(''list_k2r'',nan);');           end;
%
s1{1}                           = 'Recommended k2Rs:';
global g4iv2;
cm1                             = umo_cstrs(g4iv2.yyy.tnm,[],   'cm1');
for i=find(cm1(:,2)>0)';    
  	s1{end+1}                   = deblank(g4iv2.yyy.tnm(i, :));
  	k2R                         = iv2_tracerList(s1(end));
 	for j=1:1:size(k2R,1);      s1{end+1}                   = [' ',num2str(k2R(j))];        end;    end;
%    
s1{end+1}                   = '< select one and edit, if needed';
%
set(bH,     'Value',1,  'Style','popupmenu',    'String',s1,    'CallBack','mv2_s2m(''get_k2r'',[]);');
return;
%%

function                        local_get_k2r;
%%
% iTag                            = get(gco,  'Tag');
% x                               = get(gcf,  'UserData');
% y                               = get(findobj(gcf, 'Tag','prep.MPE.mflg'),  'UserData');
% bHs                             = y(:, umo_cstrs(char(x.str4cb),'k2r ', 'im1'));
% rn                              = umo_cstrs(char(get(bHs, 'Tag')),[iTag,' '], 'im1');

% im1                             = umo_cstrs(char(get(bHs(:, umo_cstrs(char(x.str4cb),'k2r ','im1')))),'k2r ', 'im1')
% ww                              = str2num(get(gco,  'Tag'));
cos                             = get(gco,  'String');
cov                             = get(gco,  'Value');
if strcmpi(get(gco, 'Style'),'popupmenu');
    if cos{cov}(1)~=' ';                                                            return;         end;
    set(gco,    'Style','pushbutton',   'String',cos{cov}(cos{cov}~=' '));
elseif strcmpi(get(gco, 'Style'),'pushbutton');
    set(gco,    'Style','edit');
elseif strcmpi(get(gco, 'Style'),'edit');
    if isempty(str2num(cos));   local_brink(gco, 'wrong',0.5);              

    else;                       set(gco,    'Style','pushbutton',   'String',cos(cos~=' '));        end;
                                                                                                    end;
set(findobj(gcf, 'Tag','prep.MPE.info'),    'String','Step 1: Hit ''Save this method'' GUI when done');
return;
%%

function                        local_blank_input;
%%
ud                              = get(gco,  'UserData');
if ~isempty(ud) && isfield(ud,'flg');
                                str                         = [ud.flg,' (deleted)'];
else;                           str                       	= '(deleted)';                          end;
set(gco,    'Value',1,  'Style','pushbutton',   'String',str);
return;
%%

function                        local_this_param_done(ud);
%%
ctag                            = str2num(get(gco, 'Tag'));
set(gco,    'Value',1,  'Style','pushbutton',   'String',ud.flg,    'UserData',ud);
set(findobj(gcf, 'Tag',[num2str(ctag(1)),',',num2str(ctag(2)+1)]),  'String','*',   ...
                                'CallBack',get(gco, 'CallBack'));
return;
%%

function                        local_accept_new(cbs);
%
ctag                            = str2num(get(gco, 'Tag'));
ud                              = get(gco, 'UserData');
str                             = [];
if ~isempty(ud) && isfield(ud,'flg');                       str                     = ud.flg;       end;
[qqq, cb]                       = feval(['local_',lower(get(findobj(gcf,    ...
                                                            'Tag','prep.MPE.mflg'), 'String')),'_var']);
set(findobj(gcf, 'Tag','prep.MPE.info'),    'String',cb.title{ctag(2)});
if isempty(str);
    if iscell(cb.str{ctag(2)});
        k                       = umo_cstrs(char(qqq.methods), [get(findobj(gcf, 'Tag',     ...
                                    'prep.MPE.cmethod'), 'String'),' '],    'im1');
        str                     = cb.str{ctag(2)}{k};
    else;                       str                         = cb.str{ctag(2)};              end;    end;
%
set(gco,    'Value',1,  'Style','edit',     'String',str);
return;
%%

function                        local_set(x);
%% set prep.MPE module
%
if ~isfield(x,'str4cb');        x.str4cb                    = x.p4mpe.str4cb;                       end;
L2W                             = findobj(groot, 'Tag','iv2L2W');
if numel(L2W)~=1;                                                                   return;         end;
global g4iv2;
tag                             = 'MPE.gen.module';
%x.p4mpe
h                               = findobj(groot,    'Tag',tag);
if ~isempty(h);
    figure(h);
    local_reuse_module(x);                                                          return;         end;
%
[qqq, cb]                     	= feval(['local_',lower(x.p4mpe.mflg),'_var']);
x.cbstr                         = cb.str;
x.cbstr{1}                      = qqq.methods;
% size(x.p4mpe.flg,1)>4 in older versions:
if size(x.p4mpe.flg,1)>4;       x.p4mpe.flg                 = x.p4mpe.flg(1:4,  :);
                                x.p4mpe.res                 = x.p4mpe.res(1:4,  :);                 end;
%
n                               = 12;
nb                              = numel(qqq.p_titles);
nrs                             = sum([2, 12, 1, 1, size(g4iv2.yyy.cMat,1), 1]);
bwd                             = nb.*96;
%
[fN2, bpos]                     = bWindow([], ...
                                'nrs',                      nrs,                ...
                                'bwd',                      bwd,                ...
                                'ttl',                      'prep-MPE');
% aligning with L2W:
% moving the module to right side of L2W:
p1                              = get(fN2,                  'Position');
p0                              = get(L2W,                  'Position');
set(fN2,    'Position',[p0(1)+p0(3)+5, p0(2)+p0(4)-p1(4), p1(3),   p1(4)]); 
%                            
set(fN2,                        'CloseRequestFcn',          ' ',                ...
                                'tag',                      tag,                ...
                                'Toolbar',                  'none',             ...
                                'Menubar',                  'none');
% 
% First row GUIs:
ic                              = 1;
jHs                             = postJBs(fN2,              'B',bpos(ic,:),[1,4;1,1]);
set(jHs(1),	'String','Instructions', 'BackgroundColor',iv2_bgcs(2),  'FontWeight','bold');
set(jHs(2),	'String','Select a method to work on from 1st column',  'FontWeight','bold',    ...
                                'Tag','prep.MPE.inst',      'BackgroundColor',iv2_bgcs(2));
% Second row GUIs:                       
ic                              = ic + 1;
jHs                             = postJBs(fN2,              'B',bpos(ic,:),[1;nb]);
cbstr                           = ['ud = get(gco,''UserData''); ',  ...
                                    'set(findobj(gcf,''Tag'',''prep.MPE.info''),''String'',ud);'];
for i=1:1:nb-1;                 
    set(jHs(i),     'String',qqq.p_titles{i},   'UserData',cb.title{i}, 'CallBack',cbstr);          end;
%
set(jHs(1),     'String',x.p4mpe.mflg,  'Tag','prep.MPE.mflg');
set(jHs(end),   'String','PET #s',      'UserData',jHs);
set(jHs,        'BackgroundColor',iv2_bgcs(1),  'FontWeight','bold');

% overview chart (the main matrix): 
bHs                             = zeros(n,   	nb);
for i=1:1:n;
    ic                          = ic + 1;
    bHs(i,  :)                  = postJBs(fN2,              'B',bpos(ic,:),[1;nb]);                 end;
for i=1:1:numel(qqq.methods);
 	set(bHs(i+1, 1),	'String',qqq.methods{i}, 'CallBack','mv2_s2m(''activate_a_method'',[]);');  end;
%
% setting tags of bHs (to access them without bHs)
for i=2:1:size(bHs,2);
    for j=1:1:size(bHs,1);      set(bHs(j,i),   'Tag',[int2str(j),',',int2str(i)]);         end;    end;
%
set(findobj(gcf, 'Tag','prep.MPE.mflg'), 'UserData',bHs);
% marking methods with saved parameters:
if ~isempty(x.p4mpe.mfg);
    im1                        	= umo_cstrs(lower(char(x.p4mpe.mfg)),lower(char(qqq.methods)),	'im1');
  	set(bHs(find(im1>0)+1, 1),	'BackgroundColor',iv2_bgcs(6));                                     end;
% making sure bHs(1,1) to be orange in color:
set(bHs(1,  1),     'Tag','prep.MPE.cmethod',   'BackgroundColor',iv2_bgcs(18));
% info or specific instructions:
ic                              = ic + 1;
jHs                             = postJBs(fN2,              'B',bpos(ic,:),[1,4;1,1]);
set(jHs(1),	'String','Info',    'BackgroundColor',	iv2_bgcs(2),    'FontWeight','bold',    ...
                                'CallBack','mv2_s2m(''set_help'',[]);');
set(jHs(2), 'String','Hit a Method GUI (1st column) to work on', 	'Tag','prep.MPE.info',	...
                                'BackgroundColor',	iv2_bgcs(2),    'FontWeight','bold');
%   
ic                              = ic + 1;
jHs                             = postJBs(fN2,              'B',bpos(ic,:),[1,5;1,1]);
set(jHs(1), 'String','PETs',    'BackgroundColor',iv2_bgcs(6),    'FontWeight','bold');
set(jHs(2), 'String','Mark (=filled) scans to apply and hit *GUI under PET #',               ...
                                'BackgroundColor',iv2_bgcs(6),    'FontWeight','bold');
% PET # GUIs:
pHs                             = zeros(size(g4iv2.yyy.cMat,1),    2);
for i=1:1:size(g4iv2.yyy.cMat,1);
    ic                          = ic + 1;
    pHs(i,  :)                  = postJBs(fN2,              'B',bpos(ic,:),[1,5;1,1]);
    set(pHs(i,1),   'Value',1,  'Style','radiobutton',  'String',['PET ',int2str(i)]);
    set(pHs(i,2),   'String',deblank(g4iv2.yyy.cDesc(i,:)));                                        end;
%
set(findobj(gcf, 'String','PETs'),  'UserData',pHs,         ...
                                'CallBack','set(findobj(gcf, ''Style'',''radiobutton''),''Value'',0);');
% Bottomline GUIs
ic                              = ic + 1;
jHs                             = postJBs(fN2,              'B',bpos(ic,:),[1;3]);
set(jHs(1), 'String','Save this method',    'FontWeight','bold',    ...
    'CallBack','mv2_s2m(''save_this_method'',[]);',     'BackgroundColor',iv2_bgcs(12));
set(jHs(2), 'String','Start over this method',  'FontWeight','bold',    ...
    'CallBack','mv2_s2m(''clear_this_method'',[]);',   	'BackgroundColor',iv2_bgcs(1));
set(jHs(3), 'String','Save to file',        'FontWeight','bold',    ...
    'Callback','mv2_s2m(''save_to_file'',[]);', 'BackgroundColor',iv2_bgcs(12));
set(gcf,    'UserData',x);
% adding page-up/down
pos                             = get(gcf, 'Position');
set(gcf,    'Position',pos+[0,0,10,0]);
for j=[1,size(bHs,1)];
    p1                          = get(bHs(j, end), 'Position');
   	bH1                         = postJBs(gcf,  'B', [p1(1)+p1(3)+1, p1(2),9,24], [1;1]);
  	set(bH1,    'Tag','prep.MPE.pageup',    'BackgroundColor',iv2_bgcs(10),    ...
                                'CallBack','mv2_s2m(''page_up'',[]);', 'UserData',j);               end;
set(bH1,    'Tag','prep.MPE.pagedown');
return;
%%

function                        local_reuse_module(x);
%% prepare to recycle prep.MPE.module:
cmethod                         = get(findobj(gcf, 'Tag','prep.MPE.cmethod'), 'String');
if any(cmethod~=' ');
    set(findobj(gcf, 'Tag','prep.MPE.info'),    'String',['Still working on ',cmethod,  ...
                                '! Save or clear it first'], 'BackgroundColor',iv2_bgcs(11));
    pause(0.5);
    set(findobj(gcf, 'Tag','prep.MPE.info'), 'BackgroundColor',iv2_bgcs(2));        return;         end;
% adjusting the parameter title row:
jHs                             = get(findobj(gcf, 'String','PET #s'), 'UserData');
set(jHs(1), 'String',x.p4mpe.mflg);
for i=2:1:length(jHs)-1;        set(jHs(i), 'String',x.p4mpe.p_titles{i});                        	end;

% working on the main GUI matrix:
bHs                             = get(jHs(1),   'UserData');
qqq                             = feval(['local_',lower(x.p4mpe.mflg),'_var']);
% resettubg bHs(:, 1);
set(bHs(:, 1),      'BackgroundColor',iv2_bgcs(0),  'String',' ');
for i=1:1:numel(qqq.methods);
 	set(bHs(i+1, 1),	'String',qqq.methods{i}, 'CallBack','mv2_s2m(''activate_a_method'',[]);');  end;
% making sure bHs(1,1) to be orange in color:
set(bHs(1, 1),      'BackgroundColor',iv2_bgcs(18));
% marking methods with saved parameters:
if ~isempty(x.p4mpe.mfg);
    im1                        	= umo_cstrs(lower(char(x.p4mpe.mfg)),lower(char(qqq.methods)),	'im1');
  	set(bHs(find(im1>0)+1, 1),	'BackgroundColor',iv2_bgcs(6));                                     end;
% resetting columns 2 through end:
for i=2:1:size(bHs,2);
    set(bHs(:, i),  'Value',1,  'Style','pushbutton', 'String',' ', 'UserData',[], 'CallBack',' '); end;

% revising information GUIs:
set(findobj(gcf, 'Tag','prep.MPE.info'),    'String',['Ready to work on ',x.p4mpe.mflg]);
set(findobj(gcf, 'Tag','prep.MPE.inst'),    'BackgroundColor',iv2_bgcs(4),  ...
                                'String','Select a method to work on from 1st column');

% revising UserData of prep.MPE.module;
set(gcf,    'UserData',x);
return;
%%

function                        local_activate_a_method;
%% an approach is selected in step 1:
imfg                            = get(gco,      'String');
if ~any(imfg~=' ');                                                                 return;         end;
% checking if a working method is already selected (orange GUI):
set(findobj(gcf, 'Tag','prep.MPE.cmethod'), 'String',imfg, 	'FontWeight','bold');
bHs                             = get(findobj(gcf, 'Tag','prep.MPE.mflg'), 'UserData');
set(bHs(2:end, 1),  'Enable','off');
% cancelling all GUI matrix (except for the 1st column):
for i=2:1:size(bHs,2);
    set(bHs(:, i),  'Value',1,  'Style','pushbutton', 'String',' ', 'UserData',[], 'CallBack',' '); end;
%
x                               = get(gcf,      'UserData');
k                               = umo_cstrs(char(x.p4mpe.mfg),[imfg,' '],   'im1');
[qqq, cb]                      	= feval(['local_',lower(x.p4mpe.mflg),'_var']);
m                               = umo_cstrs(char(qqq.methods),[imfg,' '],   'im1');
set(findobj(gcf, 'Tag','prep.MPE.inst'), ...
    'String','Hit filled GUIs to edit, * fore more; Hit next row GUIs for info');
set(findobj(gcf, 'Tag','prep.MPE.info'), 'String',  ...
    ['Step 1: Complete Columns from ',x.p4mpe.p_titles{2},' through ',x.p4mpe.p_titles{end-1}]);
% set(bHs(1, end), 'String','*',  'CallBack','mv2_s2m(''update_scans'',[]);');
set(bHs(1, end), 'String','in Step 2');
% never worked (or saved) on this method:
if ~k
    for i=2:1:numel(qqq.str4cb)-1;
        feval(['local_set_',qqq.str4cb{i}],bHs(:,i),[],[],  cb.str{i}{m});                          end;
                                                                                    return;         end;
% done before
for i=2:1:numel(qqq.str4cb)-1;
    feval(['local_set_',qqq.str4cb{i}],bHs(:,i),x.p4mpe.flg{i,k},x.p4mpe.res{i,k}, cb.str{i}{m});   end;
%
% s                               = [];
% for i=find(x.p4mpe.pets(k,:)>0);
%     s                           = [s,int2str(i),','];                                               end;
% %
% set(bHs(1, end),    'String',s(1, 1:end-1));
% marking applicable PETs:
% pHs                             = get(findobj(gcf, 'String','PETs'),    'UserData');
% set(pHs(:, 1),  'Value',0);
% set(pHs(x.p4mpe.pets(k,:)>0, 1),    'Value',1);
return;
%%

function                        local_save_s4mpe(x);
%%
bHs                             = get(findobj(gcf, 'Tag','prep.MPE.mflg'),      'UserData');
    istr                        = [get(bHs(1,1),    'String'),' '];
    % note that x.s4mpe.pet were udated when modified:
    cbs                         = char(get(bHs(:,1), 'CallBack'));
    set(bHs(:, 2:end),          'String',' ');
    set(bHs(1,1),   'String',' ');
    set(bHs(cbs(:,1)~=' ',1),   'Enable','on');
    imx                         = umo_cstrs(char(get(bHs(1:find(cbs(:,1)==' ',1,'last'),1),     ...
                                                            'String')),istr, 'im1');
    if sum(abs(get(bHs(imx(1), 1), 'BackgroundColor') - iv2_bgcs(6)),2)<10^-6;
                                set(bHs(imx(1), 1), 'BackgroundColor',iv2_bgcs(12));
    else;                    	set(bHs(imx(1), 1), 'BackgroundColor',iv2_bgcs(6));                 end;
return;
%%

function                        local_save_this_method;
%%
disp(' @local_save_this_method');
x                               = get(gcf,      'UserData');
% returning from step-2:
if isfield(x,'s4mpe');          local_save_s4mpe(x);                                return;         end;
%
global g4iv2;
% if isfield(x,'p4mpe') && size(x.p4mpe.pets,2)~=size(g4iv2.yyy.cMat,1); 
%     disp(['.info: adjusting # of PETs from ',int2str(size(x.p4mpe.pets,2)),    	...
%                                 ' to ',int2str(size(g4iv2.yyy.cMat,1)),' (actual).']);
%     x.p4mpe.pets                = zeros(size(x.p4mpe.pets,1),   size(g4iv2.yyy.cMat,1));            end;
bHs                             = get(findobj(gcf, 'Tag','prep.MPE.mflg'),      'UserData');
mflg                            = get(findobj(gcf, 'Tag','prep.MPE.cmethod'),   'String');

if ~any(mflg~=' ');                                                                 return;         end;
k                               = 1;
if ~isempty(x.p4mpe.flg);       
    k                           = umo_cstrs(char(x.p4mpe.flg(1,:)), [mflg,' '], 'im1');
    % adding a new method if 'mflg' is not registered yet:
    if k<1;                     k                           = size(x.p4mpe.flg,2) + 1;      end;    end;
% 
%
x.p4mpe.flg{1,  k}              = mflg;
%
for i=1:1:numel(x.str4cb)-1;    x.p4mpe.res{i, k}         	= [];
                                x.p4mpe.flg{i, k}          	= [];                                   end;
% 
x.p4mpe.res{1,  k}              = mflg;
x.p4mpe.flg{1,  k}              = mflg;
x.p4mpe.mfg{1,  k}              = mflg;
ok                              = 1;
% set local_save_p4mpe_xxx to return empty flg{i,k} if any problems:
for i=2:1:numel(x.str4cb)-1;
    [x.p4mpe.res{i, k}, x.p4mpe.flg{i, k}]                  ...
                                = feval(['local_save_p4mpe_',x.str4cb{i}],bHs(:, i));
    if isempty(x.p4mpe.flg{i, k});    	
                                ok                          = 0;                            end;    end;
%
if ok<1;                        disp('.??? @local_save_this_method');               return;         end;
%
x.p4mpe.pet_names               = g4iv2.yyy.cMat;
set(gcf,    'UserData',x);
% re-setting main GUI matrix (except Column 1):
for i=2:1:size(bHs,2)-1;
    set(bHs(:, i),  'Value',1,  'Style','pushbutton', 'String',' ', 'UserData',[], 'CallBack',' '); end;
% the end of this method.
set(findobj(gcf, 'Tag','prep.MPE.cmethod'),   'String',' ');
% set(bHs(1, end), 'String','*',  'CallBack','mv2_s2m(''update_scans'',[]);');
set(bHs(:, 1),  'Enable','on');
% marking the method with green:
set(bHs(umo_cstrs(char(get(bHs(:,1),'String')),[mflg,' '], 'im1'), 1), 'BackgroundColor',iv2_bgcs(6));
return;
%%

function    [res, flg]       	= local_save_p4mpe_tim(ibHs);
%%
res                             = [];
flg                             = [];
im1                             = umo_cstrs('pushbutton', char(get(ibHs, 'Style')), 'im1');
if any(im1<1);                  local_blink_co(ibHs(im1<1));                        return;         end;
%
s0                              = char(get(ibHs, 'String'));
c1                              = getLseg(s0, 1);
im2                             = double(c1(:,1)~='*' & c1(:,1)~='(' & c1(:,1)~=' ');
if ~any(im2>0);                                                                     return;         end;
%
c1(c1<abs('0') | c1>abs('9'))   = ' ';
[c1x, c2x]                      = getLseg(c1,   1);
if any(im2>0 & c2x(:,1)==' ');  local_blink_co(ibHs(im2>0 & c2x(:,1)==' '));     	return;         end;
%
res                             = nan(sum(im2==1), 2);
ic                              = 0;
for i=find(im2==1)';           	ic                          = ic + 1;
    if size(str2num(c1(i, :)),2)==2;
                                res(ic,  :)                 = str2num(c1(i, :));
                                c1y                         = [c1x(i, :),'T',c2x(i, :)];
                                ffg{ic}                     = c1y(c1y~=' ');    
    else;                       c2x(i,  :)                  = ' ';
                                ffg{ic}                     = ' ';                          end;    end;
%
if any(im2==1 & c2x(:,1)==' '); local_blink_co(ibHs(im2==1 & c2x(:,1)==' '));     	
                                res                         = [];                   return;         end;
flg                             = char(ffg);
return;
%%

function    [res, flg]       	= local_save_p4mpe_rfg(ibHs);
%%
im1                             = umo_cstrs('radiobutton', char(get(ibHs, 'Style')), 'im1');
im2                             = cell2mat(get(ibHs,    'Value'));
res                             = [];
flg                             = ' ';
if sum(im1>0 & im2>0)<1;                                                            return;         end;
ic                              = 0;
res                             = zeros(sum(im1>0 & im2>0), 1);
flg                             = repmat(' ',sum(im1>0 & im2>0),    5);
ic                              = 0;
for i=find(im1>0 & im2>0)';     ic                          = ic + 1;
                                [c1, c2]                    = getLseg(get(ibHs(i),  'String'), 1);
                                flg(ic, 1:size(c1,2))       = c1;
                                res(ic, :)                  = str2num(c2);                          end;
flg                             = deblank(flg);         
return;
%%
    
function    [res, flg]       	= local_save_p4mpe_k2r(ibHs);
%%
% when radiobutton is present - MRTM2 alone for now:
imr                             = umo_cstrs('radiobutton', char(get(ibHs, 'Style')), 'im1');
if imr(1)>0;
    ic                          = 0;
    res                         = nan(sum(cell2mat(get(ibHs,'Value'))==1 & imr>0), 1);
    for i=find(cell2mat(get(ibHs,'Value'))==1 & imr>0)';
        ic                      = ic + 1;
        flg{ic}                 = getLseg(get(ibHs(i), 'String'),   1);                             end;
                                                                                    return;         end;
% going over pushbutton - all others:
%
im1                             = umo_cstrs('pushbutton', char(get(ibHs, 'Style')), 'im1');
s0                              = char(get(ibHs, 'String'));
im2                             = umo_cstrs([' ';'(';'*'], s0, 'im1');
%
res                             = [];
flg                             = [];
if sum(im1>0 & im2<1)<1;                                                            return;         end;
%
res                             = zeros(sum(im1>0 & im2<1), 1);
flg                             = ' ';
ic                              = 0;
for i=find(im1>0 & im2<1)'; 
    if ~isempty(str2num(s0(i, :)));
                                ic                          = ic + 1;
                                res(ic, :)                  = str2num(s0(i, :));
                                fff{ic}                     = s0(i, :);                     end;    end;
if ic<1;                        res                         = [];                   return;         end;
res                             = res(1:ic,     :);
flg                             = deblank(char(fff));
return;
%%

function                        local_blink_co(bHs);
%%
for i=1:1:numel(bHs);           set(bHs(i),     'BackGroundColor',iv2_bgcs(11));
                                pause(0.5);
                                set(bHs(i),     'BackGroundColor',iv2_bgcs(0));                     end;
return;
%%

function    [res, flg]          = local_save_p4mpe_eic(ibHs);
%%
res                             = [];
flg                             = [];
im1                             = umo_cstrs('pushbutton', char(get(ibHs, 'Style')), 'im1');
if any(im1<1);                  local_blink_co(ibHs(im1<1));                        return;         end;
%
[c1, c2]                      	= getLseg(lower(char(get(ibHs, 'String'))), 1);
im2                             = umo_cstrs(['    ';'*   ';'-   ';'fit ';'fix '], c1, 'im1');
if any(im2<1);                  local_blink_co(ibHs(im2<1));                        return;         end;
% when the string starts with - > not applicable:
if max(im2)==3;                 res                         = nan(1);
                                flg                         = '-';                  return;         end;
% when the string starts with fit or fix (im2>3):
res                             = nan(sum(im2>3),   1);
ic                              = 0;
for i=find(im2>3);              ic                          = ic + 1;
    if ~isempty(str2num(c2(i, :)));
                                res(ic,     :)              = str2num(c2);
                                ffg{ic}                     = [deblank(c1(i,:)),' ',deblank(c2(i,:))];
    else;                       c2(i, :)                    = ' ';
                                ffg{ic}                     = ' ';                          end;    end;
%
if any(im2>3 & c2(:,1)==' ');   local_blink_co(ibHs(im2>3 & c2(:,1)==' '));         
                                res                         = [];                   return;         end;
if any(isnan(res(:)));          res                         = [];
else;                           flg                        	= char(ffg);                            end;
return;
%%

function    [res, flg]          = local_save_p4mpe_gin(ibHs);
%%
res                             = [];
flg                             = [];
%
astr                            = char(get(ibHs,    'String'));
c1                              = getLseg(astr, 1);
im1                             = umo_cstrs('radiobutton', char(get(ibHs, 'Style')), 'im1');
im2                             = umo_cstrs('k1=',      lower(c1), 'im1');
%
ic                              = 0;
res                             = nan(sum(c1(:,1)~='*' & c1(:,1)~=' '), 3);
nnn                             = zeros(sum(c1(:,1)~='*' & c1(:,1)~=' '), 1);
ccc                             = zeros(1,  size(astr,2));
for i=find(c1(:,1)~='*' & c1(:,1)~=' ');
    ic                          = ic + 1;
    % when the string starts with 'k1=' > extracting entered values:
    if im2(i)>0;                jstr                        = astr(i, :);
                                jstr(1, find(lower(jstr)=='k')+1)                   = 'x';
                                ccc(:)                      = 0;
                                ccc(:, jstr>='0' & jstr<='9')                       = 1;
                                ccc(:, jstr=='.')           = 1;
                                jstr(ccc<1)                 = ' ';
                                nnn(i,  :)                  = size(str2num(jstr),2);
                                res(ic, 1:nnn(i))           = str2num(jstr);
                                ffg{ic}                     = deblank(astr(i, :));
    % for TTCM4C which require reference region:
    elseif im1(i)>0;            vstr                        = getLseg(astr(i, :),   [0,2]);
                                res(ic, 1)                  = str2num(vstr{2});
                                ffg{ic}                     = vstr{1};
                                nnn(i,  :)                  = 1;
    % for all other methods, including '-' (no initial guesses):
    else;                       ffg{ic}                     = deblank(astr(i, :));
                                nnn(i,  :)                  = 1;                            end;    end;
%
res                             = res(:,    1:max(nnn));
flg                             = char(ffg); 
return;
%%

function                        local_clear_this_method;
%%
bHs                             = get(findobj(gcf, 'Tag','prep.MPE.mflg'), 'UserData');
x                               = get(gcf,  'UserData');
if isfield(x,'p4mpe');
    for i=2:1:size(bHs,2)-1;  	feval(['local_set_',x.str4cb{i}],bHs(:, i),[],[],[]);               end;
                                                                                    return;         end;
%
for i=2:1:size(bHs,2);
   	set(bHs(:, i),  'Value',1,  'Style','pushbutton', 'String',' ', 'UserData',[], 'CallBack',' '); end;
%   
% 
% set(bHs(1, 1),      'String',' ');
% set(bHs(:, 1),      'Enable','on');
% % cancelling all GUI matrix (except for the 1st column):
% for i=2:1:size(bHs,2);
%     set(bHs(:, i),  'Value',1,  'Style','pushbutton', 'String',' ', 'UserData',[], 'CallBack',' '); end;
% %
% set(bHs(1, end), 'String','*',  'CallBack','mv2_s2m(''update_scans'',[]);');
return;
%%

function                        local_save_to_file;
%%
x                               = get(gcf,      'UserData');
% Step 2 is done!
if isfield(x,'s4mpe');          local_save_to_file_s2(x);                           return;         end;
%
% Step 1 is done:
%
% checking if OTCM & PRGA are included when TTCM4* is entered:
if any(umo_cstrs(char(x.p4mpe.mfg), 'TTCM4', 'im1')>0);
  	h0                          = findobj(gcf, 'Tag','prep.MPE.inst');
	s0                          = get(h0,  'String');
 	bgc0                        = get(h0,  'BackgroundColor');
 	if any(umo_cstrs(char(x.p4mpe.mfg), ['PRGA';'OTCM'], 'im1')<1);
        set(h0, 'String','Set OTCM (0T20) & PRGA for TTCM4 and/or TTCM4C');
        for i=10:1:12;          set(h0,     'BackgroundColor',iv2_bgcs(i));
                                pause(1);                                                           end;
        set(h0, 'String',s0,    'BackgroundColor',bgc0);                            return;         end;
    if max(x.p4mpe.res{umo_cstrs(char(x.str4cb),'tim','im1'),       ...
                                umo_cstrs(char(x.p4mpe.mfg),'OTCM','im1')})>20;
        set(h0, 'String','Add 0T20 or less for OTCM');
        for i=9:1:11;           set(h0,     'BackgroundColor',iv2_bgcs(i));
                                pause(1);                                                           end;
        set(h0, 'String',s0,    'BackgroundColor',bgc0);                            return;         end;
                                                                                                    end;
% % when MRTM2 is included - checking if to fix k2R: 
% if strcmpi(x.p4mpe.mflg,'RTMs') && umo_cstrs(char(x.p4mpe.flg(1, :)),'MRTM2','im1')>0   ...
%     && strcmpi(x.p4mpe.flg{4,umo_cstrs(char(x.p4mpe.flg(1, :)),'MRTM2','im1')}{end},'fix')
%     rtga_                       = umo_cstrs(char(x.p4mpe.flg(1, :)),'RTGA','im1');
%     if rtga_<1;
%         set(findobj(gcf, 'Tag','prep.MPE.info'),    'BackgroundColor',iv2_bgcs(11),     ...
%             'String','Critical error! Include RTGA to fix k2R in MRTM2. Restart');
%         pause(1);
%         delete(gcf);                                                                return;         end
%     %
%     mrtm2_                      = umo_cstrs(char(x.p4mpe.flg(1, :)),'MRTM2','im1');
%     for i=1:1:size(x.p4mpe.flg{4,rtga_},1);
%         x.p4mpe.flg{4,mrtm2_}{i+1}                          = deblank(x.p4mpe.flg{4,rtga_}(i, :));
%         x.p4mpe.res{4,mrtm2_}(i+1, :)                       = x.p4mpe.res{4,rtga_}(i);              end
%                                                                                                     end
%    
p4mpe                           = x.p4mpe;
v                               = load(x.p4mpe.vinfo);
p4mpe.vflg                      = v.v4tacs.vfg;
p4mpe.stage                     = 1;
%
save(x.p4mpe.p4mpe, 'p4mpe');
disp('.done! (file of MPE settings)');
disp([' output: ',x.p4mpe.p4mpe]);

feval(['mv2_p4Ts4_',x.p4mpe.mflg],  x.p4mpe.p4mpe, x.p4mpe.s4mpe);

y                               = load(x.p4mpe.s4mpe);
y.s4mpe.s4mpe                   = x.p4mpe.s4mpe;
set(gcf,    'UserData',y)
set(findobj(gcf, 'Tag','prep.MPE.inst'),    'BackgroundColor',iv2_bgcs(11),         ...
                                'String','Expand mode. Check/Set applicable PETs for each approach');
set(findobj(gcf, 'Tag','prep.MPE.info'),    'String','Expand mode: One approach per row');

local_clear_this_method;
bHs                             = get(findobj(gcf, 'Tag','prep.MPE.mflg'), 'UserData');
bgcs                            = cell2mat(get(bHs(:,1),    'BackgroundColor'));
set(bHs(:, 1),  'CallBack',' ');
b06                             = iv2_bgcs(6);
b12                             = iv2_bgcs(12);
set(bHs(sum(abs(bgcs - b06(ones(size(bgcs,1),1), :)),2)<10.^-6, 1),     ...
                                'CallBack','mv2_s2m(''expand_mode_s1'',[]);');
set(bHs(sum(abs(bgcs - b12(ones(size(bgcs,1),1), :)),2)<10.^-6, 1),     ...
    'BackgroundColor',iv2_bgcs(6),  'CallBack','mv2_s2m(''expand_mode_s1'',[]);');
return;
%%

function                        local_save_to_file_s2(x);
%%
global g4iv2;
s4mpe                           = x.s4mpe;
s4mpe.pet_names                 = g4iv2.yyy.cMat
save(x.s4mpe.s4mpe,  	's4mpe');
disp('.done! (file of MPE settings; ver. expand)');
disp([' output: ',x.s4mpe.s4mpe]); 
set(findobj(gcf, 'Tag','prep.MPE.inst'),    'String','Done! Now safe to quit')
set(gco,    'String','Quit',    'CallBack','delete(gcf);');                     
return;
%%

function                        local_expand_mode_s1;
%% 
x                               = get(gcf,      'UserData');
%
im1                             = umo_cstrs(char(x.s4mpe.ext_mfg), [get(gco,'String'),' '], 'im1');
if ~im1;                                                                            return;         end;
bHs                             = get(findobj(gcf, 'Tag','prep.MPE.mflg'), 'UserData');
set(bHs(1,1),   'String',x.s4mpe.ext_mfg{im1(1)});
set(bHs(2:end, 1),  'Enable','off');
% adjusting page-up/down GUIs' color:
set(findobj(gcf, 'Tag','prep.MPE.pageup'),  'BackgroundColor',iv2_bgcs(10),     ...
                                'UserData',im1(1:1:min([size(bHs,1),length(im1)])));
if length(im1)>size(bHs,1);     
    set(findobj(gcf, 'Tag','prep.MPE.pagedown'),    'BackgroundColor',iv2_bgcs(6));
else;
    set(findobj(gcf, 'Tag','prep.MPE.pagedown'),    'BackgroundColor',iv2_bgcs(10));                end;
%
for i=1:1:min([12,length(im1)]);
    for j=2:1:4;                set(bHs(i, j), 'String',x.s4mpe.ext_flg{im1(i)}{j});                end;
    ppp                         = [];
    for j=find(x.s4mpe.pet(im1(i), :)>0);
                                ppp                         = [ppp, int2str(j),','];                end;
    set(bHs(i, 5), 'String',ppp(1, 1:end-1), 'CallBack','mv2_s2m(''update_scans'',[]);');           end;
return;
%%

function                        local_update_scans;
%%
pHs                             = get(findobj(gcf, 'String','PETs'),    'UserData');
if size(pHs,1)==1;           	ppp                         = get(pHs(1,1), 'Value');
else;                           ppp                         = cell2mat(get(pHs(:,1), 'Value'))';    end;
if ~any(ppp>0);                                                                     return;         end;
str                             = [];
for i=find(ppp(:)>0)';          str                         = [str, int2str(i),','];              	end;
set(gco,    'String',str(1, 1:end-1));
%
bpos                            = str2num(get(gco, 'Tag'));
dnos                            = get(findobj(gcf, 'Tag','prep.MPE.pageup'),   'UserData');

x                               = get(gcf,      'UserData');
if ~isfield(x,'s4mpe');                                                             return;         end;
im1                         	= umo_cstrs(char(x.s4mpe.ext_mfg),  ...
                                    [get(findobj(gcf, 'Tag','prep.MPE.cmethod'), 'String'),' '], 'im1');
x.s4mpe.pet(im1==dnos(bpos(1)), :)                   	= zeros(1, size(x.s4mpe.pet,2));
x.s4mpe.pet(im1==dnos(bpos(1)), ppp(:)>0)              	= 1;
set(gcf,    'UserData',x);                                          
return;
%%

function    x                   = local_check_inputs(i3,ooo);
%% fixing i4 (=output of this code), if older versions
%
x                               = [];
z                               = load(i3);
% z.Info4TACs.voimat
if ~exist(z.Info4TACs.voimat,'file');                                               return;         end;
[idx, inm]                      = fileparts(ooo{1});
mflg                            = [upper(inm(1,3:5)), lower(inm(1, 6))];
if isempty(which(['local_',lower(mflg),'_var']));
    disp('.unexpexted error @local_fix_ifl2');                                      return;         end;
qqq                             = feval(['local_',lower(mflg),'_var']);
% constructing x.p4mpe in the new format:
x.p4mpe                         = struct('v4t',i3,  'vinfo',z.Info4TACs.voimat,         ...
                                    'p4mpe',ooo{1},   's4mpe',ooo{2},   'mflg',mflg,    ...
                                      	'pets',[],   'mfg',[],   'res',[],  'flg',[]);
x.p4mpe.str4cb                  = qqq.str4cb;
x.p4mpe.p_titles                = qqq.p_titles;
% adding .ref (reference regions);
q                               = load(z.Info4TACs.voimat);
x.p4mpe.refs                    = q.v4tacs.vnos(any(q.v4tacs.vnos(:,2:end)==3,2),1);
%
if ~exist(ooo{1},'file');                                                       	return;         end;
y                               = load(ooo{1});
if ~isfield(y.p4mpe,'res') || ~isfield(y.p4mpe,'mflg');
    disp('.problem! an orlder version of MPE parameter file');
    disp(' > starting fresh (ignoring the file).');
    disp(' > showing old parameters for your convenience:');
    y.p4mpe,                                                                        return;         end;
%
% x.p4mpe
% now both PIMs and RTMs have 5 variables
for i=1:1:size(y.p4mpe.flg,2);
    mfg{i}                      = y.p4mpe.flg{1, i};
    for j=1:1:4;                res{j,i}                    = y.p4mpe.res{j,i};
                                flg{j,i}                    = y.p4mpe.flg{j,i};                     end;
                                res{5,i}                    = 1;
                                flg{5,i}                    = '-';                                  end;
x.p4mpe.res                     = res;
x.p4mpe.flg                     = flg;
x.p4mpe.mfg                     = mfg;
if isfield(y.p4mpe,'w2a');      x.p4mpe.pets             	= y.p4mpe.w2a;
else;                           x.p4mpe.pets             	= y.p4mpe.pets;                         end;
return;
%%

function                        local_page_up;
%%
if sum(abs(get(gco, 'BackgroundColor')-iv2_bgcs(10)))<10^-6;                        return;         end;
im0                             = get(findobj(gcf, 'Tag','prep.MPE.pageup'), 'UserData');
%
x                               = get(gcf,                  'userData');
bHs                             = get(findobj(gcf, 'Tag','prep.MPE.mflg'), 'UserData');
im1                             = umo_cstrs(char(x.s4mpe.ext_mfg), [get(bHs(1,1),'String'),' '], 'im1');
n                               = length(im1);
if strcmpi(get(gco,'Tag'),'prep.MPE.pageup');
	im1(min(im0):end)           = 0;
	im1                         = im1(im1>0);
    im1(:)                      = sort(-im1);
  	v2d                         = sort(-im1(1:1:min([length(im1),size(bHs,1)])));
else;                           
    im1(1:max(im0))             = 0;
  	im1                         = im1(im1>0);
   	v2d                         = im1(1:1:min([length(im1),size(bHs,1)]));                          end;
%
if min(v2d)==1;                 
    set(findobj(gcf, 'Tag','prep.MPE.pageup'),  'BackgroundColor',iv2_bgcs(10), 'UserData',v2d);
else;
    set(findobj(gcf, 'Tag','prep.MPE.pageup'),  'BackgroundColor',iv2_bgcs(6),  'UserData',v2d);    end;
%
if max(v2d)==n;
    set(findobj(gcf, 'Tag','prep.MPE.pagedown'),    'BackgroundColor',iv2_bgcs(10));
else;
    set(findobj(gcf, 'Tag','prep.MPE.pagedown'),    'BackgroundColor',iv2_bgcs(6));                 end;
    
for i=2:1:size(bHs,2);          set(bHs(:, i),  'String',' ',  'CallBack',' ');                     end;
for i=1:1:min([size(bHs,1),length(v2d)]);
    for j=2:1:4;                set(bHs(i, j),  'String',x.s4mpe.ext_flg{v2d(i)}{j});               end;
    ppp                         = [];
    for j=find(x.s4mpe.pet(i, :)>0);
                                ppp                         = [ppp, int2str(j),','];                end;
    set(bHs(i, 5),  'String',ppp(1, 1:end-1), 'CallBack','mv2_s2m(''update_scans'',[]);');          end;
return;
%%

function                        local_set_help;
%%
ud                              = get(gcf,                  'userData');

if strcmpi(ud.p4mpe.mflg,'pims');
disp([  ...
    '*** Setting plasma input methos ***',10,           ...
    '.Select a method from pull-down menu. Methods are .. ',10,                 ...
    '  OTCM   :  One tissue compartmental model',10,    ...
    '            Select this (for K1; e.g., 0-20 min) and PRGA to set initial guesses for TTCM4',10,... 
    '  TTCM3  :  Two tissue compartmental model with K1, k2, and k3',10,        ...
    '  TTCM4  :  Two tissue compartmental model with K1, k2, k3 and k4',10,     ...
    '  TTCM4C :  Constrained TTCM4 to get K1/k2 from the reference region',10,  ...
    '  YOCM   :  Your own compartmental analysis (under construction)',10,      ...
    '  PRGA   :  Plasma reference graphical analysis (Logan et al., 1990)',10,  ...
    '  BPITp  :  Bolus-plus-infusion transformation (Kuwabara et al., 2010)',10,...
    '  MA1    :  Ichise''s multilinear analysis (a linear version of PRGA)',10, ...
    '  TPR    :  Tissue-plasma ratio',10,               ...
    '.Make selections of variables (left > right) for each method',10,          ...
    '  Refernce regions are for calculation of BPND alone, except for TTCM4C',10,   ...
    '  All selections are editable later (See the Review section below)',10,    ...
    '  More to enter? More lines will be provided when revisitted for editing',10,  ...
    '.PET scans to apply for selected methods:',10,     ...
    '  All PETs are selected (filled). Hit any PET to deselect (open)',10,      ...
    '  Each method will be performed for filled scans alone',10,                ...
    '.Review .. ',10,       ...
    '  Hit analysis # GUIs (1st column) to display detailed selections of individual methods',10,   ...
    '  To add/remove some selection, hit GUIs showing ''Edit''',10,             ...
    '  ..Make sure to visit the last column to save changes',10,                ...
    '.Save or update selections .. ',10,                ...
    '  Hit ''Done'' GUI and respond to subsequent inquireries.',10,             ...
    '*** End of the help information ***']);

    global g4iv2;
    d                           = dir(fullfile(g4iv2.yyy.idx,'mpe','r4PIMs*.mat'));
    if numel(d)<1;              disp('> no accumulated PIM sets yet');              return;         end
    %
    disp('> past PIM sets:')
    for i=1:1:numel(d);         disp(['* ',d(i).name,' *']);
                                x                           = load(fullfile(d(i).folder,d(i).name));
                                dispCharArrays(1,char(x.s4mpe.ext_str));                            end
    disp('< end of the PIM set list')
else;
disp([  ...
    '*** Setting reference tissue methos ***',10,           ...
    '.Select a method from 1-st colum GUIs. Methods are: ',10,                  ...
    '  MRTM2  :  Multilinear reference tissue method with 2 parameters (Ichise et al., 2003)',10,   ...
    '            Need to know t* (time when the assumption of MRTM2 is established)',10,         	...
    '            This method generates optimal k2R, & mean/median version (_mk2R.ezd)',10,          ...
    '            as well as fixed k2R versions, if RTGA is set',10,             ...
    '  RTGA   :  Reference region graphical analysis (Logan et al., 1996)',10,  ...
    '            Need to supply populatio mean k2R of the radioligand',10,      ...
    '            and t* (time when the assumption of RTGA is established)',10,  ...
    '  BPIT   :  Bolus-plus-infusion transformation (Kuwabara et al., 2010)',10,...
    '  TRR    :  Target-reference ratio method (a.k.a. SUVR)',10,               ...
    '  SRTM2  :  Simplified reference region method with 2 parameters',10,      ...
    '            with the original 3 parameter vesion (SRTM3; Lammertsma et al., 1996)',10,         ...
    '            Do not use since SRTM2 yields identical BP data as MRTM2 (but time consuming)',10, ...
    '  SUV    :  Standard uptake value in %',10,        ...
    '            Need to enter bodyweights (Kg) and injected radioactivity (mCi) in scanDB.m',10,   ...
    '.The selected method will be brought up and highlighted in orange',10,     ...
    '  Need to work on cells with *. Hit one to complete it ',10,               ...
    '  Make sure to hit return (after entering the variable) before moving on to next cell',10,     ...
    '  * will appear one below GUI when the task is completed for a cell (hit return)',10,          ...
    '  * will not appear when no more to enter',10,                             ...
    '.Make sure to hit the cell with * under PET #s to enter scans to apply the method',10,         ...
    '  Marked scans under PETs will be included',10,                            ...
    '.Hit ''Save this method'' GUI to save all methods to a designated file',10,                    ...
    '  Wnat to review settings? Repeat bringing up saved methods (green) & saving it',10,           ... 
    '*** End of the help information ***']);
end;
return;
%%